###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run //rust:crates_vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "async-stream": "@rules_proto_grpc_rust__async-stream-0.3.3//:async_stream",
            "futures": "@rules_proto_grpc_rust__futures-0.3.25//:futures",
            "prost": "@rules_proto_grpc_rust__prost-0.11.6//:prost",
            "prost-types": "@rules_proto_grpc_rust__prost-types-0.11.6//:prost_types",
            "protoc-gen-prost": "@rules_proto_grpc_rust__protoc-gen-prost-0.2.1//:protoc_gen_prost",
            "protoc-gen-prost-crate": "@rules_proto_grpc_rust__protoc-gen-prost-crate-0.3.1//:protoc_gen_prost_crate",
            "protoc-gen-tonic": "@rules_proto_grpc_rust__protoc-gen-tonic-0.2.1//:protoc_gen_tonic",
            "rand": "@rules_proto_grpc_rust__rand-0.8.5//:rand",
            "serde": "@rules_proto_grpc_rust__serde-1.0.152//:serde",
            "serde_json": "@rules_proto_grpc_rust__serde_json-1.0.91//:serde_json",
            "tokio": "@rules_proto_grpc_rust__tokio-1.24.2//:tokio",
            "tokio-stream": "@rules_proto_grpc_rust__tokio-stream-0.1.11//:tokio_stream",
            "tonic": "@rules_proto_grpc_rust__tonic-0.8.3//:tonic",
            "tonic-build": "@rules_proto_grpc_rust__tonic-build-0.8.2//:tonic_build",
        },
    },
}

_NORMAL_ALIASES = {
    "": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "": {
    },
}

_NORMAL_DEV_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "prost-derive": "@rules_proto_grpc_rust__prost-derive-0.11.6//:prost_derive",
        },
    },
}

_PROC_MACRO_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "": {
    },
}

_BUILD_DEPENDENCIES = {
    "": {
    },
}

_BUILD_ALIASES = {
    "": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "": {
    },
}

_CONDITIONS = {
    "aarch64-pc-windows-gnullvm": [],
    "aarch64-pc-windows-msvc": [],
    "aarch64-uwp-windows-msvc": [],
    "cfg(any(unix, target_os = \"wasi\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(docsrs)": [],
    "cfg(not(any(target_arch = \"wasm32\", target_arch = \"wasm64\")))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-pc-windows-msvc", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-pc-windows-msvc", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(target_arch = \"wasm32\")": ["wasm32-unknown-unknown", "wasm32-wasi"],
    "cfg(target_os = \"redox\")": [],
    "cfg(target_os = \"wasi\")": ["wasm32-wasi"],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(windows)": ["i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "i686-pc-windows-gnu": [],
    "i686-pc-windows-msvc": ["i686-pc-windows-msvc"],
    "i686-uwp-windows-gnu": [],
    "i686-uwp-windows-msvc": [],
    "x86_64-pc-windows-gnu": [],
    "x86_64-pc-windows-gnullvm": [],
    "x86_64-pc-windows-msvc": ["x86_64-pc-windows-msvc"],
    "x86_64-uwp-windows-gnu": [],
    "x86_64-uwp-windows-msvc": [],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__anyhow-1.0.68",
        sha256 = "2cb2f989d18dd141ab8ae82f64d1a8cdd37e0840f73a406896cf5e99502fab61",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/anyhow/1.0.68/download"],
        strip_prefix = "anyhow-1.0.68",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.anyhow-1.0.68.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__async-stream-0.3.3",
        sha256 = "dad5c83079eae9969be7fadefe640a1c566901f05ff91ab221de4b6f68d9507e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/async-stream/0.3.3/download"],
        strip_prefix = "async-stream-0.3.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.async-stream-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__async-stream-impl-0.3.3",
        sha256 = "10f203db73a71dfa2fb6dd22763990fa26f3d2625a6da2da900d23b87d26be27",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/async-stream-impl/0.3.3/download"],
        strip_prefix = "async-stream-impl-0.3.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.async-stream-impl-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__async-trait-0.1.63",
        sha256 = "eff18d764974428cf3a9328e23fc5c986f5fbed46e6cd4cdf42544df5d297ec1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/async-trait/0.1.63/download"],
        strip_prefix = "async-trait-0.1.63",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.async-trait-0.1.63.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__autocfg-1.1.0",
        sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocfg/1.1.0/download"],
        strip_prefix = "autocfg-1.1.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.autocfg-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__axum-0.6.4",
        sha256 = "e5694b64066a2459918d8074c2ce0d5a88f409431994c2356617c8ae0c4721fc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/axum/0.6.4/download"],
        strip_prefix = "axum-0.6.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.axum-0.6.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__axum-core-0.3.2",
        sha256 = "1cae3e661676ffbacb30f1a824089a8c9150e71017f7e1e38f2aa32009188d34",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/axum-core/0.3.2/download"],
        strip_prefix = "axum-core-0.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.axum-core-0.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__base64-0.13.1",
        sha256 = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/base64/0.13.1/download"],
        strip_prefix = "base64-0.13.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.base64-0.13.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__bytes-1.3.0",
        sha256 = "dfb24e866b15a1af2a1b663f10c6b6b8f397a84aadb828f12e5b289ec23a3a3c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bytes/1.3.0/download"],
        strip_prefix = "bytes-1.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.bytes-1.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__either-1.8.0",
        sha256 = "90e5c1c8368803113bf0c9584fc495a58b86dc8a29edbf8fe877d21d9507e797",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/either/1.8.0/download"],
        strip_prefix = "either-1.8.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.either-1.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__fastrand-1.8.0",
        sha256 = "a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fastrand/1.8.0/download"],
        strip_prefix = "fastrand-1.8.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.fastrand-1.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__fixedbitset-0.4.2",
        sha256 = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fixedbitset/0.4.2/download"],
        strip_prefix = "fixedbitset-0.4.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.fixedbitset-0.4.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__fnv-1.0.7",
        sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fnv/1.0.7/download"],
        strip_prefix = "fnv-1.0.7",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.fnv-1.0.7.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-0.3.25",
        sha256 = "38390104763dc37a5145a53c29c63c1290b5d316d6086ec32c293f6736051bb0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures/0.3.25/download"],
        strip_prefix = "futures-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-channel-0.3.25",
        sha256 = "52ba265a92256105f45b719605a571ffe2d1f0fea3807304b522c1d778f79eed",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-channel/0.3.25/download"],
        strip_prefix = "futures-channel-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-channel-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-core-0.3.25",
        sha256 = "04909a7a7e4633ae6c4a9ab280aeb86da1236243a77b694a49eacd659a4bd3ac",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-core/0.3.25/download"],
        strip_prefix = "futures-core-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-core-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-executor-0.3.25",
        sha256 = "7acc85df6714c176ab5edf386123fafe217be88c0840ec11f199441134a074e2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-executor/0.3.25/download"],
        strip_prefix = "futures-executor-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-executor-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-io-0.3.25",
        sha256 = "00f5fb52a06bdcadeb54e8d3671f8888a39697dcb0b81b23b55174030427f4eb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-io/0.3.25/download"],
        strip_prefix = "futures-io-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-io-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-macro-0.3.25",
        sha256 = "bdfb8ce053d86b91919aad980c220b1fb8401a9394410e1c289ed7e66b61835d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-macro/0.3.25/download"],
        strip_prefix = "futures-macro-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-macro-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-sink-0.3.25",
        sha256 = "39c15cf1a4aa79df40f1bb462fb39676d0ad9e366c2a33b590d7c66f4f81fcf9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-sink/0.3.25/download"],
        strip_prefix = "futures-sink-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-sink-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-task-0.3.25",
        sha256 = "2ffb393ac5d9a6eaa9d3fdf37ae2776656b706e200c8e16b1bdb227f5198e6ea",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-task/0.3.25/download"],
        strip_prefix = "futures-task-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-task-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__futures-util-0.3.25",
        sha256 = "197676987abd2f9cadff84926f410af1c183608d36641465df73ae8211dc65d6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/futures-util/0.3.25/download"],
        strip_prefix = "futures-util-0.3.25",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.futures-util-0.3.25.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__getrandom-0.2.8",
        sha256 = "c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/getrandom/0.2.8/download"],
        strip_prefix = "getrandom-0.2.8",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.getrandom-0.2.8.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__h2-0.3.15",
        sha256 = "5f9f29bc9dda355256b2916cf526ab02ce0aeaaaf2bad60d65ef3f12f11dd0f4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/h2/0.3.15/download"],
        strip_prefix = "h2-0.3.15",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.h2-0.3.15.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__hashbrown-0.12.3",
        sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hashbrown/0.12.3/download"],
        strip_prefix = "hashbrown-0.12.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.hashbrown-0.12.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__heck-0.4.0",
        sha256 = "2540771e65fc8cb83cd6e8a237f70c319bd5c29f78ed1084ba5d50eeac86f7f9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/heck/0.4.0/download"],
        strip_prefix = "heck-0.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.heck-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__http-0.2.8",
        sha256 = "75f43d41e26995c17e71ee126451dd3941010b0514a81a9d11f3b341debc2399",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/http/0.2.8/download"],
        strip_prefix = "http-0.2.8",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.http-0.2.8.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__http-body-0.4.5",
        sha256 = "d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/http-body/0.4.5/download"],
        strip_prefix = "http-body-0.4.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.http-body-0.4.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__http-range-header-0.3.0",
        sha256 = "0bfe8eed0a9285ef776bb792479ea3834e8b94e13d615c2f66d03dd50a435a29",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/http-range-header/0.3.0/download"],
        strip_prefix = "http-range-header-0.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.http-range-header-0.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__httparse-1.8.0",
        sha256 = "d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/httparse/1.8.0/download"],
        strip_prefix = "httparse-1.8.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.httparse-1.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__httpdate-1.0.2",
        sha256 = "c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/httpdate/1.0.2/download"],
        strip_prefix = "httpdate-1.0.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.httpdate-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__hyper-0.14.23",
        sha256 = "034711faac9d2166cb1baf1a2fb0b60b1f277f8492fd72176c17f3515e1abd3c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hyper/0.14.23/download"],
        strip_prefix = "hyper-0.14.23",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.hyper-0.14.23.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__hyper-timeout-0.4.1",
        sha256 = "bbb958482e8c7be4bc3cf272a766a2b0bf1a6755e7a6ae777f017a31d11b13b1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hyper-timeout/0.4.1/download"],
        strip_prefix = "hyper-timeout-0.4.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.hyper-timeout-0.4.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__indexmap-1.9.2",
        sha256 = "1885e79c1fc4b10f0e172c475f458b7f7b93061064d98c3293e98c5ba0c8b399",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/indexmap/1.9.2/download"],
        strip_prefix = "indexmap-1.9.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.indexmap-1.9.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__instant-0.1.12",
        sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/instant/0.1.12/download"],
        strip_prefix = "instant-0.1.12",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.instant-0.1.12.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__itertools-0.10.5",
        sha256 = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itertools/0.10.5/download"],
        strip_prefix = "itertools-0.10.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.itertools-0.10.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__itoa-1.0.5",
        sha256 = "fad582f4b9e86b6caa621cabeb0963332d92eea04729ab12892c2533951e6440",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itoa/1.0.5/download"],
        strip_prefix = "itoa-1.0.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.itoa-1.0.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__lazy_static-1.4.0",
        sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazy_static/1.4.0/download"],
        strip_prefix = "lazy_static-1.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.lazy_static-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__libc-0.2.139",
        sha256 = "201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.139/download"],
        strip_prefix = "libc-0.2.139",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.libc-0.2.139.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__log-0.4.17",
        sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.17/download"],
        strip_prefix = "log-0.4.17",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.log-0.4.17.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__matchit-0.7.0",
        sha256 = "b87248edafb776e59e6ee64a79086f65890d3510f2c656c000bf2a7e8a0aea40",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/matchit/0.7.0/download"],
        strip_prefix = "matchit-0.7.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.matchit-0.7.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__memchr-2.5.0",
        sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/memchr/2.5.0/download"],
        strip_prefix = "memchr-2.5.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.memchr-2.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__mime-0.3.16",
        sha256 = "2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/mime/0.3.16/download"],
        strip_prefix = "mime-0.3.16",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.mime-0.3.16.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__mio-0.8.5",
        sha256 = "e5d732bc30207a6423068df043e3d02e0735b155ad7ce1a6f76fe2baa5b158de",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/mio/0.8.5/download"],
        strip_prefix = "mio-0.8.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.mio-0.8.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__multimap-0.8.3",
        sha256 = "e5ce46fe64a9d73be07dcbe690a38ce1b293be448fd8ce1e6c1b8062c9f72c6a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/multimap/0.8.3/download"],
        strip_prefix = "multimap-0.8.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.multimap-0.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__once_cell-1.17.0",
        sha256 = "6f61fba1741ea2b3d6a1e3178721804bb716a68a6aeba1149b5d52e3d464ea66",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.17.0/download"],
        strip_prefix = "once_cell-1.17.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.once_cell-1.17.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__percent-encoding-2.2.0",
        sha256 = "478c572c3d73181ff3c2539045f6eb99e5491218eae919370993b890cdbdd98e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/percent-encoding/2.2.0/download"],
        strip_prefix = "percent-encoding-2.2.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.percent-encoding-2.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__petgraph-0.6.2",
        sha256 = "e6d5014253a1331579ce62aa67443b4a658c5e7dd03d4bc6d302b94474888143",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/petgraph/0.6.2/download"],
        strip_prefix = "petgraph-0.6.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.petgraph-0.6.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__pin-project-1.0.12",
        sha256 = "ad29a609b6bcd67fee905812e544992d216af9d755757c05ed2d0e15a74c6ecc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-project/1.0.12/download"],
        strip_prefix = "pin-project-1.0.12",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-project-1.0.12.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__pin-project-internal-1.0.12",
        sha256 = "069bdb1e05adc7a8990dce9cc75370895fbe4e3d58b9b73bf1aee56359344a55",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-project-internal/1.0.12/download"],
        strip_prefix = "pin-project-internal-1.0.12",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-project-internal-1.0.12.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__pin-project-lite-0.2.9",
        sha256 = "e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-project-lite/0.2.9/download"],
        strip_prefix = "pin-project-lite-0.2.9",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-project-lite-0.2.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__pin-utils-0.1.0",
        sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pin-utils/0.1.0/download"],
        strip_prefix = "pin-utils-0.1.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.pin-utils-0.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__ppv-lite86-0.2.17",
        sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ppv-lite86/0.2.17/download"],
        strip_prefix = "ppv-lite86-0.2.17",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.ppv-lite86-0.2.17.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__prettyplease-0.1.23",
        sha256 = "e97e3215779627f01ee256d2fad52f3d95e8e1c11e9fc6fd08f7cd455d5d5c78",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prettyplease/0.1.23/download"],
        strip_prefix = "prettyplease-0.1.23",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prettyplease-0.1.23.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__proc-macro2-1.0.50",
        sha256 = "6ef7d57beacfaf2d8aee5937dab7b7f28de3cb8b1828479bb5de2a7106f2bae2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.50/download"],
        strip_prefix = "proc-macro2-1.0.50",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.proc-macro2-1.0.50.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__prost-0.11.6",
        sha256 = "21dc42e00223fc37204bd4aa177e69420c604ca4a183209a8f9de30c6d934698",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost/0.11.6/download"],
        strip_prefix = "prost-0.11.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-0.11.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__prost-build-0.11.1",
        sha256 = "7f835c582e6bd972ba8347313300219fed5bfa52caf175298d860b61ff6069bb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-build/0.11.1/download"],
        strip_prefix = "prost-build-0.11.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-build-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__prost-derive-0.11.6",
        sha256 = "8bda8c0881ea9f722eb9629376db3d0b903b462477c1aafcb0566610ac28ac5d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-derive/0.11.6/download"],
        strip_prefix = "prost-derive-0.11.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-derive-0.11.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__prost-types-0.11.6",
        sha256 = "a5e0526209433e96d83d750dd81a99118edbc55739e7e61a46764fd2ad537788",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/prost-types/0.11.6/download"],
        strip_prefix = "prost-types-0.11.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.prost-types-0.11.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__protoc-gen-prost-0.2.1",
        sha256 = "7b8bb34a371e2d605272113dad6213daae5e3e5158abe65570e19349884b9d00",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/protoc-gen-prost/0.2.1/download"],
        strip_prefix = "protoc-gen-prost-0.2.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.protoc-gen-prost-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__protoc-gen-prost-crate-0.3.1",
        sha256 = "043ee98bf0393fea59763a8b866399a10d0f05059a62cb1d6ba567af7f4e36ef",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/protoc-gen-prost-crate/0.3.1/download"],
        strip_prefix = "protoc-gen-prost-crate-0.3.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.protoc-gen-prost-crate-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__protoc-gen-tonic-0.2.1",
        sha256 = "4a7c042eb85ca1a9624e700363821388a42c554728e6c777b57ea074d027faa9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/protoc-gen-tonic/0.2.1/download"],
        strip_prefix = "protoc-gen-tonic-0.2.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.protoc-gen-tonic-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__quote-1.0.23",
        sha256 = "8856d8364d252a14d474036ea1358d63c9e6965c8e5c1885c18f73d70bff9c7b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.23/download"],
        strip_prefix = "quote-1.0.23",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.quote-1.0.23.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__rand-0.8.5",
        sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand/0.8.5/download"],
        strip_prefix = "rand-0.8.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rand-0.8.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__rand_chacha-0.3.1",
        sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_chacha/0.3.1/download"],
        strip_prefix = "rand_chacha-0.3.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rand_chacha-0.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__rand_core-0.6.4",
        sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_core/0.6.4/download"],
        strip_prefix = "rand_core-0.6.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rand_core-0.6.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__redox_syscall-0.2.16",
        sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/redox_syscall/0.2.16/download"],
        strip_prefix = "redox_syscall-0.2.16",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.redox_syscall-0.2.16.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__regex-1.7.1",
        sha256 = "48aaa5748ba571fb95cd2c85c09f629215d3a6ece942baa100950af03a34f733",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex/1.7.1/download"],
        strip_prefix = "regex-1.7.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.regex-1.7.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__regex-syntax-0.6.28",
        sha256 = "456c603be3e8d448b072f410900c09faf164fbce2d480456f50eea6e25f9c848",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/regex-syntax/0.6.28/download"],
        strip_prefix = "regex-syntax-0.6.28",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.regex-syntax-0.6.28.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__remove_dir_all-0.5.3",
        sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/remove_dir_all/0.5.3/download"],
        strip_prefix = "remove_dir_all-0.5.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.remove_dir_all-0.5.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__rustversion-1.0.11",
        sha256 = "5583e89e108996506031660fe09baa5011b9dd0341b89029313006d1fb508d70",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustversion/1.0.11/download"],
        strip_prefix = "rustversion-1.0.11",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.rustversion-1.0.11.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__ryu-1.0.12",
        sha256 = "7b4b9743ed687d4b4bcedf9ff5eaa7398495ae14e61cba0a295704edbc7decde",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ryu/1.0.12/download"],
        strip_prefix = "ryu-1.0.12",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.ryu-1.0.12.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__serde-1.0.152",
        sha256 = "bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde/1.0.152/download"],
        strip_prefix = "serde-1.0.152",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.serde-1.0.152.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__serde_derive-1.0.152",
        sha256 = "af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_derive/1.0.152/download"],
        strip_prefix = "serde_derive-1.0.152",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.serde_derive-1.0.152.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__serde_json-1.0.91",
        sha256 = "877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_json/1.0.91/download"],
        strip_prefix = "serde_json-1.0.91",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.serde_json-1.0.91.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__slab-0.4.7",
        sha256 = "4614a76b2a8be0058caa9dbbaf66d988527d86d003c11a94fbd335d7661edcef",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/slab/0.4.7/download"],
        strip_prefix = "slab-0.4.7",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.slab-0.4.7.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__socket2-0.4.7",
        sha256 = "02e2d2db9033d13a1567121ddd7a095ee144db4e1ca1b1bda3419bc0da294ebd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/socket2/0.4.7/download"],
        strip_prefix = "socket2-0.4.7",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.socket2-0.4.7.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__syn-1.0.107",
        sha256 = "1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.107/download"],
        strip_prefix = "syn-1.0.107",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.syn-1.0.107.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__sync_wrapper-0.1.1",
        sha256 = "20518fe4a4c9acf048008599e464deb21beeae3d3578418951a189c235a7a9a8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/sync_wrapper/0.1.1/download"],
        strip_prefix = "sync_wrapper-0.1.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.sync_wrapper-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tempfile-3.3.0",
        sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tempfile/3.3.0/download"],
        strip_prefix = "tempfile-3.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tempfile-3.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tokio-1.24.2",
        sha256 = "597a12a59981d9e3c38d216785b0c37399f6e415e8d0712047620f189371b0bb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio/1.24.2/download"],
        strip_prefix = "tokio-1.24.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-1.24.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tokio-io-timeout-1.2.0",
        sha256 = "30b74022ada614a1b4834de765f9bb43877f910cc8ce4be40e89042c9223a8bf",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-io-timeout/1.2.0/download"],
        strip_prefix = "tokio-io-timeout-1.2.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-io-timeout-1.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tokio-macros-1.8.2",
        sha256 = "d266c00fde287f55d3f1c3e96c500c362a2b8c695076ec180f27918820bc6df8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-macros/1.8.2/download"],
        strip_prefix = "tokio-macros-1.8.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-macros-1.8.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tokio-stream-0.1.11",
        sha256 = "d660770404473ccd7bc9f8b28494a811bc18542b915c0855c51e8f419d5223ce",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-stream/0.1.11/download"],
        strip_prefix = "tokio-stream-0.1.11",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-stream-0.1.11.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tokio-util-0.7.4",
        sha256 = "0bb2e075f03b3d66d8d8785356224ba688d2906a371015e225beeb65ca92c740",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tokio-util/0.7.4/download"],
        strip_prefix = "tokio-util-0.7.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tokio-util-0.7.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tonic-0.8.3",
        sha256 = "8f219fad3b929bef19b1f86fbc0358d35daed8f2cac972037ac0dc10bbb8d5fb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tonic/0.8.3/download"],
        strip_prefix = "tonic-0.8.3",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tonic-0.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tonic-build-0.8.2",
        sha256 = "48c6fd7c2581e36d63388a9e04c350c21beb7a8b059580b2e93993c526899ddc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tonic-build/0.8.2/download"],
        strip_prefix = "tonic-build-0.8.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tonic-build-0.8.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tower-0.4.13",
        sha256 = "b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower/0.4.13/download"],
        strip_prefix = "tower-0.4.13",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-0.4.13.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tower-http-0.3.5",
        sha256 = "f873044bf02dd1e8239e9c1293ea39dad76dc594ec16185d0a1bf31d8dc8d858",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower-http/0.3.5/download"],
        strip_prefix = "tower-http-0.3.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-http-0.3.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tower-layer-0.3.2",
        sha256 = "c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower-layer/0.3.2/download"],
        strip_prefix = "tower-layer-0.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-layer-0.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tower-service-0.3.2",
        sha256 = "b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tower-service/0.3.2/download"],
        strip_prefix = "tower-service-0.3.2",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tower-service-0.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tracing-0.1.37",
        sha256 = "8ce8c33a8d48bd45d624a6e523445fd21ec13d3653cd51f681abf67418f54eb8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing/0.1.37/download"],
        strip_prefix = "tracing-0.1.37",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-0.1.37.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tracing-attributes-0.1.23",
        sha256 = "4017f8f45139870ca7e672686113917c71c7a6e02d4924eda67186083c03081a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing-attributes/0.1.23/download"],
        strip_prefix = "tracing-attributes-0.1.23",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-attributes-0.1.23.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tracing-core-0.1.30",
        sha256 = "24eb03ba0eab1fd845050058ce5e616558e8f8d8fca633e6b163fe25c797213a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing-core/0.1.30/download"],
        strip_prefix = "tracing-core-0.1.30",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-core-0.1.30.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__tracing-futures-0.2.5",
        sha256 = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tracing-futures/0.2.5/download"],
        strip_prefix = "tracing-futures-0.2.5",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.tracing-futures-0.2.5.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__try-lock-0.2.4",
        sha256 = "3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/try-lock/0.2.4/download"],
        strip_prefix = "try-lock-0.2.4",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.try-lock-0.2.4.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__unicode-ident-1.0.6",
        sha256 = "84a22b9f218b40614adcb3f4ff08b703773ad44fa9423e4e0d346d5db86e4ebc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.6/download"],
        strip_prefix = "unicode-ident-1.0.6",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.unicode-ident-1.0.6.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__want-0.3.0",
        sha256 = "1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/want/0.3.0/download"],
        strip_prefix = "want-0.3.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.want-0.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__wasi-0.11.0-wasi-snapshot-preview1",
        sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasi/0.11.0+wasi-snapshot-preview1/download"],
        strip_prefix = "wasi-0.11.0+wasi-snapshot-preview1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.wasi-0.11.0+wasi-snapshot-preview1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__which-4.4.0",
        sha256 = "2441c784c52b289a054b7201fc93253e288f094e2f4be9058343127c4226a269",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/which/4.4.0/download"],
        strip_prefix = "which-4.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.which-4.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__winapi-0.3.9",
        sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi/0.3.9/download"],
        strip_prefix = "winapi-0.3.9",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.winapi-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__winapi-i686-pc-windows-gnu-0.4.0",
        sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-i686-pc-windows-gnu-0.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__winapi-x86_64-pc-windows-gnu-0.4.0",
        sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-x86_64-pc-windows-gnu-0.4.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows-sys-0.42.0",
        sha256 = "5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-sys/0.42.0/download"],
        strip_prefix = "windows-sys-0.42.0",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows-sys-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_aarch64_gnullvm-0.42.1",
        sha256 = "8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.42.1/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_aarch64_gnullvm-0.42.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_aarch64_msvc-0.42.1",
        sha256 = "4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_msvc/0.42.1/download"],
        strip_prefix = "windows_aarch64_msvc-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_aarch64_msvc-0.42.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_i686_gnu-0.42.1",
        sha256 = "de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_gnu/0.42.1/download"],
        strip_prefix = "windows_i686_gnu-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_i686_gnu-0.42.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_i686_msvc-0.42.1",
        sha256 = "bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_msvc/0.42.1/download"],
        strip_prefix = "windows_i686_msvc-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_i686_msvc-0.42.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_x86_64_gnu-0.42.1",
        sha256 = "c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnu/0.42.1/download"],
        strip_prefix = "windows_x86_64_gnu-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_x86_64_gnu-0.42.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_x86_64_gnullvm-0.42.1",
        sha256 = "628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.42.1/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_x86_64_gnullvm-0.42.1.bazel"),
    )

    maybe(
        http_archive,
        name = "rules_proto_grpc_rust__windows_x86_64_msvc-0.42.1",
        sha256 = "447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_msvc/0.42.1/download"],
        strip_prefix = "windows_x86_64_msvc-0.42.1",
        build_file = Label("@rules_proto_grpc//rust/crates:BUILD.windows_x86_64_msvc-0.42.1.bazel"),
    )

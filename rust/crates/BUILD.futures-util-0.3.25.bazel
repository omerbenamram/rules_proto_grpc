###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run //rust:crates_vendor
###############################################################################

load(
    "@rules_rust//cargo:defs.bzl",
    "cargo_build_script",
)

# buildifier: disable=bzl-visibility
load("@rules_rust//crate_universe/private:selects.bzl", "select_with_or")
load(
    "@rules_rust//rust:defs.bzl",
    "rust_library",
)

package(default_visibility = ["//visibility:public"])

# licenses([
#     "TODO",  # MIT OR Apache-2.0
# ])

rust_library(
    name = "futures_util",
    srcs = glob(
        include = [
            "**/*.rs",
        ],
        exclude = [
        ],
    ),
    aliases = select({
        "//conditions:default": {
        },
    }),
    compile_data = glob(
        include = ["**"],
        exclude = [
            "**/* *",
            "BUILD.bazel",
            "BUILD",
            "WORKSPACE.bazel",
            "WORKSPACE",
        ],
    ) + select_with_or({
        "//conditions:default": [
        ],
    }),
    crate_features = [
        "alloc",
        "async-await",
        "async-await-macro",
        "channel",
        "futures-channel",
        "futures-io",
        "futures-macro",
        "futures-sink",
        "io",
        "memchr",
        "sink",
        "slab",
        "std",
    ],
    crate_root = "src/lib.rs",
    data = select_with_or({
        "//conditions:default": [
        ],
    }),
    edition = "2018",
    proc_macro_deps = [
    ] + select({
        "//conditions:default": [
            "@rules_proto_grpc_rust__futures-macro-0.3.25//:futures_macro",
        ],
    }),
    rustc_env = {
    },
    rustc_env_files = select_with_or({
        "//conditions:default": [
        ],
    }),
    rustc_flags = [
        # In most cases, warnings in 3rd party crates are not interesting as
        # they're out of the control of consumers. The flag here silences
        # warnings. For more details see:
        # https://doc.rust-lang.org/rustc/lints/levels.html
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-bazel",
        "manual",
        "noclippy",
        "norustfmt",
    ],
    version = "0.3.25",
    deps = [
    ] + select({
        "//conditions:default": [
            "@rules_proto_grpc_rust__futures-channel-0.3.25//:futures_channel",
            "@rules_proto_grpc_rust__futures-core-0.3.25//:futures_core",
            "@rules_proto_grpc_rust__futures-io-0.3.25//:futures_io",
            "@rules_proto_grpc_rust__futures-sink-0.3.25//:futures_sink",
            "@rules_proto_grpc_rust__futures-task-0.3.25//:futures_task",
            "@rules_proto_grpc_rust__futures-util-0.3.25//:build_script_build",
            "@rules_proto_grpc_rust__memchr-2.5.0//:memchr",
            "@rules_proto_grpc_rust__pin-project-lite-0.2.9//:pin_project_lite",
            "@rules_proto_grpc_rust__pin-utils-0.1.0//:pin_utils",
            "@rules_proto_grpc_rust__slab-0.4.7//:slab",
        ],
    }),
)

cargo_build_script(
    # See comment associated with alias. Do not change this name
    name = "futures-util_build_script",
    srcs = glob(
        include = [
            "**/*.rs",
        ],
        exclude = [
        ],
    ),
    aliases = select({
        "//conditions:default": {
        },
    }),
    build_script_env = {
    },
    compile_data = select_with_or({
        "//conditions:default": [
        ],
    }),
    crate_features = [
        "alloc",
        "async-await",
        "async-await-macro",
        "channel",
        "futures-channel",
        "futures-io",
        "futures-macro",
        "futures-sink",
        "io",
        "memchr",
        "sink",
        "slab",
        "std",
    ],
    crate_name = "build_script_build",
    crate_root = "build.rs",
    data = glob(
        include = ["**"],
        exclude = [
            "**/* *",
            "BUILD.bazel",
            "BUILD",
            "WORKSPACE.bazel",
            "WORKSPACE",
        ],
    ) + select_with_or({
        "//conditions:default": [
        ],
    }),
    edition = "2018",
    proc_macro_deps = [
    ] + select({
        "//conditions:default": [
        ],
    }),
    rustc_env = {
    },
    rustc_env_files = select_with_or({
        "//conditions:default": [
        ],
    }),
    rustc_flags = [
        # In most cases, warnings in 3rd party crates are not interesting as
        # they're out of the control of consumers. The flag here silences
        # warnings. For more details see:
        # https://doc.rust-lang.org/rustc/lints/levels.html
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-bazel",
        "manual",
        "noclippy",
        "norustfmt",
    ],
    tools = select_with_or({
        "//conditions:default": [
        ],
    }),
    version = "0.3.25",
    visibility = ["//visibility:private"],
    deps = [
    ] + select({
        "//conditions:default": [
        ],
    }),
)

alias(
    # Because `cargo_build_script` does some invisible target name mutating to
    # determine the package and crate name for a build script, the Bazel
    # target namename of any build script cannot be the Cargo canonical name
    # of `build_script_build` without losing out on having certain Cargo
    # environment variables set.
    name = "build_script_build",
    actual = "futures-util_build_script",
    tags = [
        "manual",
    ],
)
